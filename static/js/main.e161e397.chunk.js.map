{"version":3,"sources":["assets/spinner-red.gif","data/classData.js","App.js","Container.jsx","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","classData","person","bicycle","car","motorcycle","airplane","bus","train","truck","boat","traffic light","fire hydrant","stop sign","parking meter","bench","bird","cat","dog","horse","sheep","cow","elephant","bear","zebra","giraffe","backpack","umbrella","handbag","tie","suitcase","frisbee","skis","snowboard","sports ball","kite","baseball bat","baseball glove","skateboard","surfboard","tennis racket","bottle","wine glass","cup","fork","knife","spoon","bowl","banana","apple","sandwich","orange","broccoli","carrot","hot dog","pizza","donut","cake","chair","couch","potted plant","bed","dining table","toilet","tv","laptop","mouse","remote","keyboard","cell phone","microwave","oven","toaster","sink","refrigerator","book","clock","vase","scissors","teddy bear","hair drier","toothbrush","App","props","loadModel","cocoSsd","windowWidth","window","innerWidth","windowHeight","innerHeight","canvasRef","useRef","vidRef","buildRectangle","discriminations","ctx","current","getContext","clearRect","canvas","width","height","lineWidth","textBaseline","font","forEach","guess","guessText","concat","class","strokeStyle","textWidth","measureText","textHeight","parseInt","strokeRect","bbox","fillStyle","fillRect","fillText","useEffect","navigator","mediaDevices","getUserMedia","loadCam","audio","video","facingMode","then","stream","srcObject","Promise","resolve","onloadedmetadata","catch","err","alert","all","res","detectUtility","model","detect","requestAnimationFrame","console","error","react_default","a","createElement","Fragment","ref","className","autoPlay","playsInline","muted","Landing","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","begin","loading","framesProcessed","guessData","handleClick","bind","assertThisInitialized","_this2","setState","log","setTimeout","id","href","onClick","type","src","spinner","alt","src_App_0","handleGuess","handleCountFrames","React","Component","Boolean","location","hostname","match","ReactDOM","render","Container_Landing","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e161e397.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner-red.d6578615.gif\";","const classData = { \n  person: '#f50422',\n  bicycle: '#48b41b',\n  car: '#9685eb',\n  motorcycle: '#c79ed2',\n  airplane: '#8fd883',\n  bus: '#79352c',\n  train: '#648177',\n  truck: '#fc458e',\n  boat: '#615af0',\n  'traffic light': '#e33e52',\n  'fire hydrant': '#3e464c',\n  'stop sign': '#ea9e70',\n  'parking meter': '#1c271',\n  bench: '#ba96ce',\n  bird: '#d70a9c',\n  cat: '#1ec227',\n  dog: '#e23dd0',\n  horse: '#4a543f',\n  sheep: '#96b00c',\n  cow: '#cb5bea',\n  elephant: '#aead3a',\n  bear: '#ae90e2',\n  zebra: '#67eb4b',\n  giraffe: '#01ac53',\n  backpack: '#0ec0ff',\n  umbrella: '#d3486d',\n  handbag: '#11dec1',\n  tie: '#8a96c6',\n  suitcase: '#cd2f00',\n  frisbee: '#b11573',\n  skis: '#916988',\n  snowboard: '#fb21a3',\n  'sports ball': '#0971f0',\n  kite: '#c6e1e8',\n  'baseball bat': '#3d6751',\n  'baseball glove': '#79bca0',\n  skateboard: '#b2be57',\n  surfboard: '#983f7a',\n  'tennis racket': '#880977',\n  bottle: '#1bb699',\n  'wine glass': '#e0eeb8',\n  cup: '#f50422',\n  fork: '#792ed8',\n  knife: '#436a9e',\n  spoon: '#3cec35',\n  bowl: '#ce00be',\n  banana: '#640fc1',\n  apple: '#ee91e3',\n  sandwich: '#e4ac44',\n  orange: '#1dc18',\n  broccoli: '#651be6',\n  carrot: '#9b5c2a',\n  'hot dog': '#1ae6db',\n  pizza: '#a2f8a5',\n  donut: '#f2510e',\n  cake: '#ea24a3',\n  chair: '#1350ce',\n  couch: '#9e6d71',\n  'potted plant': '#4bb473',\n  bed: '#f07815',\n  'dining table': '#0023b8',\n  toilet: '#bde052',\n  tv: '#d36647',\n  laptop: '#06f43a',\n  mouse: '#3b8c2a',\n  remote: '#be608b',\n  keyboard: '#d2737d',\n  'cell phone': '#4ca2f9',\n  microwave: '#86e98f',\n  oven: '#64820f',\n  toaster: '#88e9b8',\n  sink: '#e7dbce',\n  refrigerator: '#1c65cb',\n  book: '#a84a8f',\n  clock: '#8fb413',\n  vase: '#7fb411',\n  scissors: '#911e20',\n  'teddy bear': '#c6c42c',\n  'hair drier': '#513d98',\n  toothbrush: '#911e7e' \n}\n\nexport default classData;","import React, {useRef, useEffect} from 'react';\nimport './App.css';\nimport * as cocoSsd from \"@tensorflow-models/coco-ssd\";\nimport classData from './data/classData.js'\n\nconst App = (props) => {\n  // promised loading model \n  const loadModel = cocoSsd.load('mobilenet_v2');\n  // Refs\n  const windowWidth = window.innerWidth;\n  const windowHeight = window.innerHeight;\n  const canvasRef = useRef(null);\n  const vidRef = useRef(null);\n  \n\n  // Utils\n  const detectUtility = (video, model) => { // uses detect method on the model then calls the box building util below on each object recognized\n  \n    model.detect(video)\n      .then(discriminations => {\n        // console.log(discriminations);\n        // props.handleCountFrames()\n        buildRectangle(discriminations);\n        // props.handleGuess(discriminations);\n      })\n    requestAnimationFrame(() => detectUtility(video, model));\n  };\n\n  const buildRectangle = discriminations => { // Draws a rectangle with html around each discriminations in the object passed in\n    // !!!!\n    // https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\n    // !!!!\n\n    const ctx = canvasRef.current.getContext('2d'); // define the rectangle\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\n    // Build the rectangle styling\n    ctx.lineWidth = 2;\n    ctx.textBaseline = 'bottom';\n    ctx.font = '14px sans-serif';\n    \n    discriminations.forEach(guess => { // Draw the rectangle around each object prediction\n      const guessText = `${guess.class}`;\n     \n      ctx.strokeStyle = classData[guessText]; // give each guess.class's box a unique color\n     \n      const textWidth = ctx.measureText(guessText).width;\n      const textHeight = parseInt(ctx.font, 10);\n      ctx.strokeRect(guess.bbox[0], guess.bbox[1], guess.bbox[2], guess.bbox[3]);\n      ctx.fillStyle = 'white';\n      ctx.fillRect( \n        guess.bbox[0]-ctx.lineWidth/2, // place the label on the top left of the box\n        guess.bbox[1], \n        textWidth + ctx.lineWidth, \n        -textHeight);\n      ctx.fillStyle = '#fc0303' // color the label text red, always\n      ctx.fillText(guessText, guess.bbox[0], guess.bbox[1]);\n    });\n  };\n\n  // https://reactjs.org/docs/hooks-effect.html\n  useEffect(() => {\n\n    const rules = {// Define the rules for the mediaDevices in loadCam below\n      audio: false,\n      video: {facingMode: 'environment'}\n    };\n\n    // Control if user has cam / browser\n    if (navigator.mediaDevices.getUserMedia) { // check if the browser is getting a prompt for cam permission\n      const loadCam = navigator.mediaDevices.getUserMedia(rules) // returns promise, ask for cam permission with constraints in rules above\n      .then(stream => {\n        vidRef.current.srcObject = stream;\n        return new Promise(resolve => \n          vidRef.current.onloadedmetadata = resolve\n          );\n      })\n      .catch(err => {\n        alert(`Please allow the browser to access your device's camera!!!`)\n      });\n\n      // Wait for the cocoSsd model to load, then for the cam to load\n      Promise.all([loadModel, loadCam]) // wait for loading the coco-ssd model & the cam feed, then call detectutility with the vidref and results\n      .then(\n        res => {\n          detectUtility(vidRef.current, res[0]) // build guesses on each image from the feed\n        }\n        )\n      .catch(\n        err => console.error(`Error loading the models / cam ${err}`));\n    }\n    else {\n      alert('You should probably download Chrome buddy');\n    }\n  });\n\n  // Render the feed & app\n  return (\n    <>\n      <video\n        ref={vidRef}\n        className='app-position'\n        autoPlay\n        playsInline\n        muted\n        width={windowWidth}\n        height={windowHeight}\n      />\n      <canvas\n        ref={canvasRef}\n        className='app-position'\n        width={windowWidth}\n        height={windowHeight-100}\n      />\n    </>\n    );\n}\nexport default App;","import React from 'react';\nimport App from './App.js';\nimport './Container.css';\nimport spinner from './assets/spinner-red.gif'\n\nexport default class Landing extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      begin: false,\n      loading: true,\n      framesProcessed: 0,\n      guessData: {\n      }\n    }\n    this.handleClick = this.handleClick.bind(this);\n    // this.handleGuess = this.handleGuess.bind(this);\n    // this.handleCountFrames = this.handleCountFrames.bind(this);\n  }\n\n  componentDidMount() {\n    // setInterval(() => this.setState({framesProcessed: this.state.framesProcessed+1}), 500)\n  }\n\n  handleClick() {\n    this.setState({begin: true})\n    console.log('https://www.linkedin.com/in/cneblett/')\n    setTimeout(() => {\n      this.setState({loading: false})\n    }, 5000);\n  }\n\n  // handleCountFrames() {\n  //   this.setState({framesProcessed: this.state.framesProcessed+1});\n  // }\n  \n  // handleGuess(discriminations) {\n    // // {class: \"refrigerator\", score: 0.5058758854866028}\n\n    // if (this.state.framesProcessed % 10 === 0) {\n    //   let guessData = this.state.guessData;\n    //   discriminations.forEach( guess => {\n    //     guessData[guess.class] = guess.class;\n        // console.log(guess)\n        // if (this.state.guessData[guess.class]) {\n        //   let guessData = this.state.guessData;\n        //   guessData[guess.class] = [\n        //     (this.state.guessData[guess.class][0] + 1),\n        //     (Number(this.state.guessData[guess.class][1]) + Number((guess.score*100).toFixed(3)))\n        //   ]\n        //   this.setState({guessData : guessData})\n        // }\n        // else if (!this.state.guessData[guess.class]) {\n        //   let guessData = this.state.guessData;\n        //   guessData[guess.class] = [1, (Number(guess.score*100).toFixed(3))]\n        //   this.setState({guessData : guessData})\n        // }\n      // })\n  //     this.setState({guessData: guessData})\n  //     console.log(this.state.framesProcessed, this.state.guessData);\n  //   }\n  // }\n\n  render() {\n    // console.log(this.state.guessData)\n    // console.log(this.state.framesProcessed);\n    return (\n    <div id='container'>\n\n      {this.state.begin === false ?\n      // Landing Page\n        <div>\n            <h1 id='header-title'>Object Detector</h1>\n          <hr id='first-hr'></hr>\n          <br></br>\n            <a id='header' href='https://www.github.com/cnebs'>Project GitHub</a>\n          <br></br>\n            <span id='header'>Still image detection powered by:</span>\n          <br></br>\n            <div id='support-links'>\n              <a id='header-links-1' href='https://www.npmjs.com/package/@tensorflow/tfjs'>Tensorflow.js</a>\n              <span id='header'>|</span>\n              <a id='header-links-2' href='https://github.com/tensorflow/tfjs-models/tree/master/coco-ssd'>Detection Model</a>\n            </div>\n          <div id='wrapper'>\n            <button onClick={this.handleClick} type=\"button\">Launch</button>\n          </div>\n            {/* <hr id='second-hr'></hr> */}\n          {/* <br/>\n          <br/> */}\n            <span id='footer'>Want to train your own image classifier?</span>\n          <br></br>\n            <a id='footer' href='https://codelabs.developers.google.com/codelabs/tensorflowjs-teachablemachine-codelab/index.html#6'>Tensorflow tutorial</a>\n        </div> :\n\n        // App Page\n        <div>\n          <h3 id='header'>Object Detector</h3>\n          <hr id='first-hr'></hr>\n          <>\n            {this.state.loading === true ? \n            <span id='header'><img src={spinner} alt=\"loading ...\" /></span> : \n            <></>}\n            <App \n              handleGuess={this.handleGuess} \n              handleCountFrames={this.handleCountFrames}\n              framesProcessed={this.state.framesProcessed}\n            />\n          </>\n        </div>\n      }\n    </div>\n    )\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport Landing from './Container.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Landing />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}