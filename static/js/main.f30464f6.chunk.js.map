{"version":3,"sources":["App.js","Container.jsx","serviceWorker.js","index.js"],"names":["App","props","loadModel","cocoSsd","windowWidth","window","innerWidth","windowHeight","innerHeight","canvasRef","useRef","vidRef","buildRectangle","discriminations","ctx","current","getContext","clearRect","canvas","width","height","strokeStyle","lineWidth","textBaseline","font","forEach","guess","guessText","concat","class","textWidth","measureText","textHeight","parseInt","strokeRect","bbox","fillStyle","fillRect","fillText","useEffect","console","log","navigator","mediaDevices","getUserMedia","loadCam","audio","video","facingMode","then","stream","srcObject","Promise","resolve","onloadedmetadata","catch","err","alert","all","res","detectUtility","model","detect","requestAnimationFrame","error","react_default","a","createElement","Fragment","ref","className","autoPlay","playsInline","muted","Landing","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","begin","loading","handleClick","bind","assertThisInitialized","handleLoading","setState","bool","react_bootstrap_Container_default","id","Row_default","href","Button_default","onClick","variant","src_App_0","React","Component","Boolean","location","hostname","match","ReactDOM","render","Container_Landing","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f30464f6.chunk.js","sourcesContent":["import React, {useRef, useEffect} from 'react';\nimport './App.css';\nimport * as cocoSsd from \"@tensorflow-models/coco-ssd\";\n\nconst App = (props) => {\n  // promised loading model \n  const loadModel = cocoSsd.load('mobilenet_v2');\n  // Refs\n  const windowWidth = window.innerWidth;\n  const windowHeight = window.innerHeight;\n  const canvasRef = useRef(null);\n  const vidRef = useRef(null);\n\n  // Utils\n\n  const detectUtility = (video, model) => { // uses detect method on the model then calls the box building util below on each object recognized\n    model.detect(video)\n      .then(discriminations => {\n        buildRectangle(discriminations);\n    });\n\n    requestAnimationFrame(() => detectUtility(video, model));\n  };\n\n  const buildRectangle = discriminations => { // Draws a rectangle with html around each discriminations in the object passed in\n    // !!!!\n    // https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\n    // !!!!\n\n    const ctx = canvasRef.current.getContext('2d'); // define the rectangle\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\n    // Build the rectable styling\n    ctx.strokeStyle = 'green';\n    ctx.lineWidth = 2;\n    ctx.textBaseline = 'bottom';\n    ctx.font = '14px sans-serif';\n\n    discriminations.forEach(guess => { // Draw the rectangle around each object prediction\n      const guessText = `${guess.class}`;\n      const textWidth = ctx.measureText(guessText).width;\n      const textHeight = parseInt(ctx.font, 10);\n      ctx.strokeRect(guess.bbox[0], guess.bbox[1], guess.bbox[2], guess.bbox[3]);\n      ctx.fillStyle = '#18fc03';\n      ctx.fillRect( \n        guess.bbox[0]-ctx.lineWidth/2, \n        guess.bbox[1], \n        textWidth + ctx.lineWidth, \n        -textHeight);\n      ctx.fillStyle = '#fc0303'\n      ctx.fillText(guessText, guess.bbox[0], guess.bbox[1]);\n    });\n  };\n\n  // https://reactjs.org/docs/hooks-effect.html\n  useEffect(() => {\n    const rules = {// Define the rules for the mediaDevices in loadCam below\n      audio: false,\n      video: {facingMode: 'environment'}\n    };\n\n    // Control if user has cam / browser\n    console.log(navigator)\n    if (navigator.mediaDevices.getUserMedia) { // check if the browser is getting a prompt for cam permission\n      const loadCam = navigator.mediaDevices.getUserMedia(rules) // returns promise, ask for cam permission with constraints in rules above\n      .then(stream => {\n        vidRef.current.srcObject = stream;\n        return new Promise(resolve => \n          vidRef.current.onloadedmetadata = resolve\n          );\n      })\n      .catch(err => {\n        alert(`Please allow the browser to access your device's camera!`)\n      });\n\n      // Wait for the cocoSsd model to load, then for the cam to load\n      Promise.all([loadModel, loadCam]) // wait for loading the coco-ssd model & the cam feed, then call detectutility with the vidref and results\n      .then(\n        res => {\n          detectUtility(vidRef.current, res[0])\n        }\n        )\n      .catch(\n        err => console.error(`Error loading the models / cam ${err}`));\n    }\n    else {\n      alert('You should probably download Chrome to fix this');\n    }\n  });\n\n  // Render the feed & app\n  return (\n    <>\n      <video\n        ref={vidRef}\n        className='app-position'\n        autoPlay\n        playsInline\n        muted\n        width={windowWidth}\n        height={windowHeight}\n      />\n      <canvas\n        ref={canvasRef}\n        className='app-position'\n        width={windowWidth}\n        height={windowHeight}\n      />\n    </>\n    );\n}\nexport default App;","import React from 'react';\nimport App from './App.js';\nimport './Container.css';\nimport Container from 'react-bootstrap/Container';\n// import Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport Button from 'react-bootstrap/Button'\n\nexport default class Landing extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      begin: false,\n      loading: false\n    }\n    this.handleClick = this.handleClick.bind(this);\n    this.handleLoading = this.handleLoading.bind(this);\n  }\n\n  handleClick() {\n    this.setState({begin: true})\n  }\n\n  handleLoading(bool) {\n    if (bool === false) {\n      this.setState({loading: false})\n    }\n    else if (bool === true) {\n      this.setState({loading: true})\n    }\n  }\n\n  render() {\n    return (\n    <Container id='container'>\n      {this.state.begin === false ? \n        <Row>\n          <h1 id='header-title'>Object Detector</h1>\n          <a id='header' href='https://www.github.com/cnebs'>My GitHub</a>\n          <br></br>\n          <a id='header' href='https://www.npmjs.com/package/@tensorflow/tfjs'>Tensorflow.js</a>\n          <br></br>\n          <a id='header' href='https://github.com/tensorflow/tfjs-models/tree/master/coco-ssd'>Detection Model</a>\n          <div id='wrapper'>\n            <Button onClick={this.handleClick} variant=\"primary\">Launch</Button>\n          </div>\n        </Row> :\n        \n        <Row> \n          <p></p>\n          <h3 id='header'>Object Detector</h3>\n          <>\n          {this.state.loading === true ? <span id='header'>Loading...</span> : <></>}\n          <App />\n          </>\n        </Row>\n      }\n    </Container>\n    )\n  }\n\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport Landing from './Container.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Landing />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}